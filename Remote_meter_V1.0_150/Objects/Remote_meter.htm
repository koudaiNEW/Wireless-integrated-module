<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\Remote_meter.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\Remote_meter.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050169: Last Updated: Mon Oct 23 09:40:31 2023
<BR><P>
<H3>Maximum Stack Usage =        240 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; Ethernet_Send_Time &rArr; LCD_General &rArr; GetPTValue &rArr; GetPTADC &rArr; ReadSensor &rArr; Sensor_GetByte &rArr; Sensor_SDA_OUT &rArr; Gpio_Init &rArr; SetBit
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[2f]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[6]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">NMI_Handler</a><BR>
 <LI><a href="#[8]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">SVC_Handler</a><BR>
 <LI><a href="#[9]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">PendSV_Handler</a><BR>
 <LI><a href="#[27]">CAN_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27]">CAN_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[23]">ADC_DAC_IRQHandler</a> from interrupts_hc32l17x.o(i.ADC_DAC_IRQHandler) referenced from startup_hc32l17x.o(RESET)
 <LI><a href="#[27]">CAN_IRQHandler</a> from startup_hc32l17x.o(.text) referenced from startup_hc32l17x.o(RESET)
 <LI><a href="#[2a]">CLKTRIM_CTS_IRQHandler</a> from startup_hc32l17x.o(.text) referenced from startup_hc32l17x.o(RESET)
 <LI><a href="#[f]">DMAC_IRQHandler</a> from interrupts_hc32l17x.o(i.DMAC_IRQHandler) referenced from startup_hc32l17x.o(RESET)
 <LI><a href="#[29]">FLASH_RAM_IRQHandler</a> from interrupts_hc32l17x.o(i.FLASH_RAM_IRQHandler) referenced from startup_hc32l17x.o(RESET)
 <LI><a href="#[7]">HardFault_Handler</a> from interrupts_hc32l17x.o(i.HardFault_Handler) referenced from startup_hc32l17x.o(RESET)
 <LI><a href="#[17]">I2C0_IRQHandler</a> from interrupts_hc32l17x.o(i.I2C0_IRQHandler) referenced from startup_hc32l17x.o(RESET)
 <LI><a href="#[18]">I2C1_IRQHandler</a> from interrupts_hc32l17x.o(i.I2C1_IRQHandler) referenced from startup_hc32l17x.o(RESET)
 <LI><a href="#[28]">LCD_IRQHandler</a> from interrupts_hc32l17x.o(i.LCD_IRQHandler) referenced from startup_hc32l17x.o(RESET)
 <LI><a href="#[1c]">LPTIM0_1_IRQHandler</a> from interrupts_hc32l17x.o(i.LPTIM0_1_IRQHandler) referenced from startup_hc32l17x.o(RESET)
 <LI><a href="#[13]">LPUART0_IRQHandler</a> from interrupts_hc32l17x.o(i.LPUART0_IRQHandler) referenced from startup_hc32l17x.o(RESET)
 <LI><a href="#[14]">LPUART1_IRQHandler</a> from interrupts_hc32l17x.o(i.LPUART1_IRQHandler) referenced from startup_hc32l17x.o(RESET)
 <LI><a href="#[6]">NMI_Handler</a> from startup_hc32l17x.o(.text) referenced from startup_hc32l17x.o(RESET)
 <LI><a href="#[20]">PCA_IRQHandler</a> from interrupts_hc32l17x.o(i.PCA_IRQHandler) referenced from startup_hc32l17x.o(RESET)
 <LI><a href="#[24]">PCNT_IRQHandler</a> from interrupts_hc32l17x.o(i.PCNT_IRQHandler) referenced from startup_hc32l17x.o(RESET)
 <LI><a href="#[b]">PORTA_IRQHandler</a> from interrupts_hc32l17x.o(i.PORTA_IRQHandler) referenced from startup_hc32l17x.o(RESET)
 <LI><a href="#[c]">PORTB_IRQHandler</a> from interrupts_hc32l17x.o(i.PORTB_IRQHandler) referenced from startup_hc32l17x.o(RESET)
 <LI><a href="#[d]">PORTC_E_IRQHandler</a> from interrupts_hc32l17x.o(i.PORTC_E_IRQHandler) referenced from startup_hc32l17x.o(RESET)
 <LI><a href="#[e]">PORTD_F_IRQHandler</a> from interrupts_hc32l17x.o(i.PORTD_F_IRQHandler) referenced from startup_hc32l17x.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from startup_hc32l17x.o(.text) referenced from startup_hc32l17x.o(RESET)
 <LI><a href="#[22]">RTC_IRQHandler</a> from interrupts_hc32l17x.o(i.RTC_IRQHandler) referenced from startup_hc32l17x.o(RESET)
 <LI><a href="#[2d]">Reset_Handler</a> from startup_hc32l17x.o(.text) referenced from startup_hc32l17x.o(RESET)
 <LI><a href="#[15]">SPI0_I2S0_IRQHandler</a> from startup_hc32l17x.o(.text) referenced from startup_hc32l17x.o(RESET)
 <LI><a href="#[16]">SPI1_I2S1_IRQHandler</a> from startup_hc32l17x.o(.text) referenced from startup_hc32l17x.o(RESET)
 <LI><a href="#[8]">SVC_Handler</a> from startup_hc32l17x.o(.text) referenced from startup_hc32l17x.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from interrupts_hc32l17x.o(i.SysTick_Handler) referenced from startup_hc32l17x.o(RESET)
 <LI><a href="#[2b]">SystemInit</a> from system_hc32l17x_1.o(i.SystemInit) referenced from startup_hc32l17x.o(.text)
 <LI><a href="#[19]">TIM0_IRQHandler</a> from interrupts_hc32l17x.o(i.TIM0_IRQHandler) referenced from startup_hc32l17x.o(RESET)
 <LI><a href="#[1a]">TIM1_IRQHandler</a> from interrupts_hc32l17x.o(i.TIM1_IRQHandler) referenced from startup_hc32l17x.o(RESET)
 <LI><a href="#[1b]">TIM2_IRQHandler</a> from interrupts_hc32l17x.o(i.TIM2_IRQHandler) referenced from startup_hc32l17x.o(RESET)
 <LI><a href="#[10]">TIM3_IRQHandler</a> from interrupts_hc32l17x.o(i.TIM3_IRQHandler) referenced from startup_hc32l17x.o(RESET)
 <LI><a href="#[1d]">TIM4_IRQHandler</a> from interrupts_hc32l17x.o(i.TIM4_IRQHandler) referenced from startup_hc32l17x.o(RESET)
 <LI><a href="#[1e]">TIM5_IRQHandler</a> from interrupts_hc32l17x.o(i.TIM5_IRQHandler) referenced from startup_hc32l17x.o(RESET)
 <LI><a href="#[1f]">TIM6_IRQHandler</a> from interrupts_hc32l17x.o(i.TIM6_IRQHandler) referenced from startup_hc32l17x.o(RESET)
 <LI><a href="#[11]">UART0_2_IRQHandler</a> from interrupts_hc32l17x.o(i.UART0_2_IRQHandler) referenced from startup_hc32l17x.o(RESET)
 <LI><a href="#[12]">UART1_3_IRQHandler</a> from interrupts_hc32l17x.o(i.UART1_3_IRQHandler) referenced from startup_hc32l17x.o(RESET)
 <LI><a href="#[26]">USBFS_IRQHandler</a> from startup_hc32l17x.o(.text) referenced from startup_hc32l17x.o(RESET)
 <LI><a href="#[25]">VC0_1_2_LVD_IRQHandler</a> from startup_hc32l17x.o(.text) referenced from startup_hc32l17x.o(RESET)
 <LI><a href="#[21]">WDT_IRQHandler</a> from interrupts_hc32l17x.o(i.WDT_IRQHandler) referenced from startup_hc32l17x.o(RESET)
 <LI><a href="#[2e]">__main</a> from __main.o(!!!main) referenced from startup_hc32l17x.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[2e]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[3c]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[3e]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[152]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[153]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[3f]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[154]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[43]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[155]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[156]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[157]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[158]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[159]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[15a]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[15b]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[15c]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[15d]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[15e]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[15f]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[160]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[161]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[162]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[163]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[164]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[165]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[166]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[167]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[168]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[169]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[48]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[16a]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[16b]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[16c]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[16d]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[16e]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[16f]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[3d]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[170]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[40]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[42]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[171]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[44]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; Ethernet_Send_Time &rArr; LCD_General &rArr; GetPTValue &rArr; GetPTADC &rArr; ReadSensor &rArr; Sensor_GetByte &rArr; Sensor_SDA_OUT &rArr; Gpio_Init &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[172]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[60]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[47]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[173]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[49]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[a7]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_User_Read
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_User_Write
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_ID_Set
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Uart
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Set_Socket
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_GetHClkFreq
</UL>

<P><STRONG><a name="[174]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[2d]"></a>Reset_Handler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, startup_hc32l17x.o(.text))

<P><STRONG><a name="[6]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32l17x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l17x.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32l17x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l17x.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32l17x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l17x.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32l17x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l17x.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>CLKTRIM_CTS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32l17x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l17x.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>SPI0_I2S0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32l17x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l17x.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>SPI1_I2S1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32l17x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l17x.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>USBFS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32l17x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l17x.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>VC0_1_2_LVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32l17x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l17x.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_hc32l17x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[4c]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[4b]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[4d]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[175]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[e2]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPTValue
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Refresh
</UL>

<P><STRONG><a name="[176]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[4e]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[177]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[69]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_IRQHandler
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1ms
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay10us
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Socket_Create
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Server_Ready
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Power_On
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Judgment
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_CGATT
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_ATCSQ
</UL>

<P><STRONG><a name="[178]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[cc]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPTValue
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Send_Time
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SmallNumber
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Range
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Pressure
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Number_To_Char
</UL>

<P><STRONG><a name="[179]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[17a]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[17b]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[e4]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPTValue
</UL>

<P><STRONG><a name="[4f]"></a>_dadd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[17c]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)

<P><STRONG><a name="[52]"></a>_dsub</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[17d]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub.o(.text), UNUSED)

<P><STRONG><a name="[53]"></a>_drsb</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[6a]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPTValue
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_IRQHandler
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Range
</UL>

<P><STRONG><a name="[55]"></a>_ddiv</STRONG> (Thumb, 1072 bytes, Stack size 64 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drdiv
</UL>

<P><STRONG><a name="[54]"></a>_drdiv</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[e5]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPTValue
</UL>

<P><STRONG><a name="[17e]"></a>_dfix</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, dfixi.o(.text), UNUSED)

<P><STRONG><a name="[6c]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_IRQHandler
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Range
</UL>

<P><STRONG><a name="[17f]"></a>_dfixu</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, dfixui.o(.text), UNUSED)

<P><STRONG><a name="[57]"></a>__aeabi_i2d_normalise</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[56]"></a>__aeabi_i2d</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPTValue
</UL>

<P><STRONG><a name="[180]"></a>_dflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[58]"></a>__aeabi_ui2d</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_IRQHandler
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Range
</UL>

<P><STRONG><a name="[181]"></a>_dfltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPTValue
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_IRQHandler
</UL>

<P><STRONG><a name="[182]"></a>_dmul</STRONG> (Thumb, 558 bytes, Stack size 56 bytes, dmul.o(.text), UNUSED)

<P><STRONG><a name="[110]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 20 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_Init
</UL>

<P><STRONG><a name="[5a]"></a>_fdiv</STRONG> (Thumb, 334 bytes, Stack size 20 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frdiv
</UL>

<P><STRONG><a name="[59]"></a>_frdiv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL>

<P><STRONG><a name="[e7]"></a>__aeabi_f2iz</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ffixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPTValue
</UL>

<P><STRONG><a name="[183]"></a>_ffix</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ffixi.o(.text), UNUSED)

<P><STRONG><a name="[112]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_Init
</UL>

<P><STRONG><a name="[184]"></a>_ffixu</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ffixui.o(.text), UNUSED)

<P><STRONG><a name="[5c]"></a>__aeabi_i2f_normalise</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[5b]"></a>__aeabi_i2f</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPTValue
</UL>

<P><STRONG><a name="[185]"></a>_fflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[5d]"></a>__aeabi_ui2f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_Init
</UL>

<P><STRONG><a name="[186]"></a>_ffltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[41]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[46]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[187]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[188]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[4a]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[189]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[18a]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[23]"></a>ADC_DAC_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, interrupts_hc32l17x.o(i.ADC_DAC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ADC_DAC_IRQHandler &rArr; Adc_IRQHandler &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_IRQHandler
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dac_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l17x.o(RESET)
</UL>
<P><STRONG><a name="[18b]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>ADC_User_Start</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, adc_user.o(i.ADC_User_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ADC_User_Start &rArr; Bgr_BgrEnable &rArr; delay10us
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bgr_BgrEnable
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_SGL_Start
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Enable
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_SysData_Read
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_Scan
</UL>

<P><STRONG><a name="[78]"></a>Adc_CfgSglChannel</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, adc.o(i.Adc_CfgSglChannel))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_AdcSglCfg
</UL>

<P><STRONG><a name="[67]"></a>Adc_ClrIrqStatus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, adc.o(i.Adc_ClrIrqStatus))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_IRQHandler
</UL>

<P><STRONG><a name="[6f]"></a>Adc_Disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, adc.o(i.Adc_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_IRQHandler
</UL>

<P><STRONG><a name="[64]"></a>Adc_Enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, adc.o(i.Adc_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_AdcInit
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_User_Start
</UL>

<P><STRONG><a name="[79]"></a>Adc_EnableIrq</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, adc.o(i.Adc_EnableIrq))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_AdcSglCfg
</UL>

<P><STRONG><a name="[68]"></a>Adc_GetSglResult</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, adc.o(i.Adc_GetSglResult))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_IRQHandler
</UL>

<P><STRONG><a name="[30]"></a>Adc_IRQHandler</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, adc_user.o(i.Adc_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Adc_IRQHandler &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bgr_BgrDisable
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_SGL_Stop
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_SGL_Start
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_GetSglResult
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Disable
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_ClrIrqStatus
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DAC_IRQHandler
</UL>

<P><STRONG><a name="[70]"></a>Adc_Init</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, adc.o(i.Adc_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Adc_Init &rArr; delay10us
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay10us
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_AdcInit
</UL>

<P><STRONG><a name="[66]"></a>Adc_SGL_Start</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, adc.o(i.Adc_SGL_Start))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_IRQHandler
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_User_Start
</UL>

<P><STRONG><a name="[6d]"></a>Adc_SGL_Stop</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, adc.o(i.Adc_SGL_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_IRQHandler
</UL>

<P><STRONG><a name="[72]"></a>App_AdcInit</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, adc_user.o(i.App_AdcInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = App_AdcInit &rArr; Sysctrl_SetPeripheralGate &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPeripheralGate
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bgr_BgrEnable
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Enable
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_Init
</UL>

<P><STRONG><a name="[75]"></a>App_AdcPortInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, adc_user.o(i.App_AdcPortInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = App_AdcPortInit &rArr; Sysctrl_SetPeripheralGate &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPeripheralGate
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetAnalogMode
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_Init
</UL>

<P><STRONG><a name="[77]"></a>App_AdcSglCfg</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, adc_user.o(i.App_AdcSglCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = App_AdcSglCfg &rArr; EnableNvic &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableNvic
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_EnableIrq
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_CfgSglChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_Init
</UL>

<P><STRONG><a name="[7b]"></a>App_LpUart0Cfg</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, uart_user.o(i.App_LpUart0Cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = App_LpUart0Cfg &rArr; LPUart_Init &rArr; LPUart_EnableFunc &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_GetPClkFreq
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_EnableIrq
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_DisableIrq
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_ClrStatus
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPeripheralGate
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableNvic
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleAnd4GLpUartInit
</UL>

<P><STRONG><a name="[81]"></a>App_LpUart0PortCfg</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, uart_user.o(i.App_LpUart0PortCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = App_LpUart0PortCfg &rArr; Sysctrl_SetPeripheralGate &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetAfMode
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPeripheralGate
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleAnd4GLpUartInit
</UL>

<P><STRONG><a name="[84]"></a>App_LpUart1Cfg</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, uart_user.o(i.App_LpUart1Cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = App_LpUart1Cfg &rArr; LPUart_Init &rArr; LPUart_EnableFunc &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_GetPClkFreq
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_EnableIrq
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_DisableIrq
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_ClrStatus
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPeripheralGate
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableNvic
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleAnd4GLpUartInit
</UL>

<P><STRONG><a name="[85]"></a>App_LpUart1DeInit</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, uart_user.o(i.App_LpUart1DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = App_LpUart1DeInit &rArr; Sysctrl_SetPeripheralGate &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPeripheralGate
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Send_Time
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Init
</UL>

<P><STRONG><a name="[86]"></a>App_LpUart1PortCfg</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, uart_user.o(i.App_LpUart1PortCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = App_LpUart1PortCfg &rArr; Sysctrl_SetPeripheralGate &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetAfMode
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPeripheralGate
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleAnd4GLpUartInit
</UL>

<P><STRONG><a name="[90]"></a>BLE_Analysis</STRONG> (Thumb, 300 bytes, Stack size 8 bytes, ble_user.o(i.BLE_Analysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = BLE_Analysis &rArr; BLE_PData_Read &rArr; GetPTValue &rArr; GetPTADC &rArr; ReadSensor &rArr; Sensor_GetByte &rArr; Sensor_SDA_OUT &rArr; Gpio_Init &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Setting
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Start
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_ID_Set
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_DEEPSLEEP
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_ZeroOffset_Write
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_SysData_Read
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Sensor_Write
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_PData_Read
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_OutAT
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Link
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_LED_State
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_LCD_WakeUpTime_Write
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_LCD_Flag_Write
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_IP2_Write
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_IP1_Write
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_ID_Write
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_ERROR_Return
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Clear_Buffer
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_AutoTime_Write
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Send_Time
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9c]"></a>BLE_DEEPSLEEP</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, ble_user.o(i.BLE_DEEPSLEEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = BLE_DEEPSLEEP &rArr; BLE_Judgment &rArr; BLE_SendData &rArr; LPUart_SendData &rArr; LPUart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Judgment
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Analysis
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Analysis
</UL>

<P><STRONG><a name="[9f]"></a>BLE_ID_Set</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, ble_user.o(i.BLE_ID_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BLE_ID_Set &rArr; BLE_Start &rArr; BLE_Judgment &rArr; BLE_SendData &rArr; LPUart_SendData &rArr; LPUart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_WAKE
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Start
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Restart
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Judgment
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_ID_Write
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Analysis
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Analysis
</UL>

<P><STRONG><a name="[a9]"></a>BLE_Init</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, ble_user.o(i.BLE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = BLE_Init &rArr; BLE_ID_Set &rArr; BLE_Start &rArr; BLE_Judgment &rArr; BLE_SendData &rArr; LPUart_SendData &rArr; LPUart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Start
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_ID_Set
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_DEEPSLEEP
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Uart
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_TPL
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_SMode
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Passen
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_LED_State
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_ADPTIM
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1ms
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleAnd4GLpUartInit
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[116]"></a>BLE_Link_Timeout</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ble_user.o(i.BLE_Link_Timeout))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpTim0_IRQHandler
</UL>

<P><STRONG><a name="[9b]"></a>BLE_Start</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ble_user.o(i.BLE_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = BLE_Start &rArr; BLE_Judgment &rArr; BLE_SendData &rArr; LPUart_SendData &rArr; LPUart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Judgment
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_ID_Set
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Analysis
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Analysis
</UL>

<P><STRONG><a name="[a8]"></a>BLE_WAKE</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ble_user.o(i.BLE_WAKE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BLE_WAKE &rArr; Gpio_SetIO &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_ID_Set
</UL>

<P><STRONG><a name="[b5]"></a>Battery_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, adc_user.o(i.Battery_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Battery_Init &rArr; App_AdcInit &rArr; Sysctrl_SetPeripheralGate &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_AdcSglCfg
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_AdcPortInit
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_AdcInit
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b6]"></a>Battery_Scan</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, adc_user.o(i.Battery_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Battery_Scan &rArr; ADC_User_Start &rArr; Bgr_BgrEnable &rArr; delay10us
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_User_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Send_Time
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6e]"></a>Bgr_BgrDisable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bgr.o(i.Bgr_BgrDisable))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_IRQHandler
</UL>

<P><STRONG><a name="[63]"></a>Bgr_BgrEnable</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bgr.o(i.Bgr_BgrEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Bgr_BgrEnable &rArr; delay10us
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay10us
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_AdcInit
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_User_Start
</UL>

<P><STRONG><a name="[ab]"></a>BleAnd4GLpUartInit</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, uart_user.o(i.BleAnd4GLpUartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = BleAnd4GLpUartInit &rArr; App_LpUart1Cfg &rArr; LPUart_Init &rArr; LPUart_EnableFunc &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LpUart1PortCfg
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LpUart1Cfg
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LpUart0PortCfg
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LpUart0Cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Send_Time
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13e]"></a>Bt_ClearIntFlag</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, bt.o(i.Bt_ClearIntFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Bt_ClearIntFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim0_IRQHandler
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0Init
</UL>

<P><STRONG><a name="[142]"></a>Bt_M0_ARRSet</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, bt.o(i.Bt_M0_ARRSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Bt_M0_ARRSet
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0Init
</UL>

<P><STRONG><a name="[143]"></a>Bt_M0_Cnt16Set</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, bt.o(i.Bt_M0_Cnt16Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Bt_M0_Cnt16Set
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0Init
</UL>

<P><STRONG><a name="[145]"></a>Bt_M0_Run</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bt.o(i.Bt_M0_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bt_M0_Run
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0Init
</UL>

<P><STRONG><a name="[144]"></a>Bt_Mode0_EnableIrq</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bt.o(i.Bt_Mode0_EnableIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bt_Mode0_EnableIrq
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0Init
</UL>

<P><STRONG><a name="[141]"></a>Bt_Mode0_Init</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, bt.o(i.Bt_Mode0_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Bt_Mode0_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0Init
</UL>

<P><STRONG><a name="[36]"></a>CLKTRIM_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l17x.o(i.CLKTRIM_IRQHandler), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLKTRIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkTrim_IRQHandler (Weak Reference)
</UL>

<P><STRONG><a name="[ce]"></a>CRC16</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, uart_user.o(i.CRC16))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Send_Time
</UL>

<P><STRONG><a name="[f]"></a>DMAC_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l17x.o(i.DMAC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMAC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dmac_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l17x.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>Default_Setting</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, flash_user.o(i.Default_Setting))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = Default_Setting &rArr; Flash_User_Write &rArr; Flash_WriteWord
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteByte
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SectorErase
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_User_Write
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetK
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Power_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Analysis
</UL>

<P><STRONG><a name="[7a]"></a>EnableNvic</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, interrupts_hc32l17x.o(i.EnableNvic))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EnableNvic &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LpUart1Cfg
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LpUart0Cfg
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SwitchInit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_AdcSglCfg
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0Init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTimer0Init
</UL>

<P><STRONG><a name="[bf]"></a>Ethernet_Analysis</STRONG> (Thumb, 294 bytes, Stack size 8 bytes, ethernet_user.o(i.Ethernet_Analysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Ethernet_Analysis &rArr; BLE_ID_Set &rArr; BLE_Start &rArr; BLE_Judgment &rArr; BLE_SendData &rArr; LPUart_SendData &rArr; LPUart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_User_Write
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Start
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_ID_Set
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_DEEPSLEEP
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Send_Time
</UL>

<P><STRONG><a name="[c7]"></a>Ethernet_Init</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, ethernet_user.o(i.Ethernet_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = Ethernet_Init &rArr; Ethernet_IMSI &rArr; Flash_User_Write &rArr; Flash_WriteWord
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LpUart1DeInit
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleAnd4GLpUartInit
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Uart
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Power_On
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_LED_State
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_IMSI
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_IMEI
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_CGATT
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_ATCSQ
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cb]"></a>Ethernet_Send_Time</STRONG> (Thumb, 1222 bytes, Stack size 40 bytes, ethernet_user.o(i.Ethernet_Send_Time))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Ethernet_Send_Time &rArr; LCD_General &rArr; GetPTValue &rArr; GetPTADC &rArr; ReadSensor &rArr; Sensor_GetByte &rArr; Sensor_SDA_OUT &rArr; Gpio_Init &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LpUart1DeInit
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_PData_Read
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1ms
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorScan
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_General
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleAnd4GLpUartInit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_Scan
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Analysis
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Analysis
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Uart
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_TTMode_Exit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Set_Socket
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Server_Ready
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Senddata_Success
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_SendDataFun
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Power_On
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_LED_State
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_IMSI
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_IMEI
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Close_Socket
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_CGATT
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_ATCSQ
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[29]"></a>FLASH_RAM_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, interrupts_hc32l17x.o(i.FLASH_RAM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_RAM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ram_IRQHandler (Weak Reference)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l17x.o(RESET)
</UL>
<P><STRONG><a name="[db]"></a>Flash_Init</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, flash.o(i.Flash_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Flash_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Power_Init
</UL>

<P><STRONG><a name="[de]"></a>Flash_LockAll</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, flash.o(i.Flash_LockAll))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteWord
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteHalfWord
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteByte
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SectorErase
</UL>

<P><STRONG><a name="[cd]"></a>Flash_PData_Read</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, flash_user.o(i.Flash_PData_Read))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Send_Time
</UL>

<P><STRONG><a name="[d8]"></a>Flash_PData_Write</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, flash_user.o(i.Flash_PData_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Flash_PData_Write &rArr; Flash_WriteHalfWord
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteHalfWord
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SectorErase
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorScan
</UL>

<P><STRONG><a name="[da]"></a>Flash_Power_Init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, flash_user.o(i.Flash_Power_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = Flash_Power_Init &rArr; Default_Setting &rArr; Flash_User_Write &rArr; Flash_WriteWord
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_User_Read
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Setting
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ba]"></a>Flash_SectorErase</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, flash.o(i.Flash_SectorErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Flash_SectorErase
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_UnlockAll
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_LockAll
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_PData_Write
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_User_Write
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Setting
</UL>

<P><STRONG><a name="[dd]"></a>Flash_UnlockAll</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, flash.o(i.Flash_UnlockAll))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteWord
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteHalfWord
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteByte
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SectorErase
</UL>

<P><STRONG><a name="[dc]"></a>Flash_User_Read</STRONG> (Thumb, 52 bytes, Stack size 96 bytes, flash_user.o(i.Flash_User_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Flash_User_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Power_Init
</UL>

<P><STRONG><a name="[a5]"></a>Flash_User_Write</STRONG> (Thumb, 56 bytes, Stack size 96 bytes, flash_user.o(i.Flash_User_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Flash_User_Write &rArr; Flash_WriteWord
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteWord
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SectorErase
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Setting
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_ZeroOffset_Write
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Sensor_Write
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_LCD_WakeUpTime_Write
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_LCD_Flag_Write
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_IP2_Write
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_IP1_Write
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_ID_Write
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_AutoTime_Write
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Analysis
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_IMSI
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_IMEI
</UL>

<P><STRONG><a name="[bb]"></a>Flash_WriteByte</STRONG> (Thumb, 158 bytes, Stack size 12 bytes, flash.o(i.Flash_WriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Flash_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_UnlockAll
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_LockAll
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Setting
</UL>

<P><STRONG><a name="[d9]"></a>Flash_WriteHalfWord</STRONG> (Thumb, 158 bytes, Stack size 12 bytes, flash.o(i.Flash_WriteHalfWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Flash_WriteHalfWord
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_UnlockAll
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_LockAll
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_PData_Write
</UL>

<P><STRONG><a name="[df]"></a>Flash_WriteWord</STRONG> (Thumb, 158 bytes, Stack size 12 bytes, flash.o(i.Flash_WriteWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Flash_WriteWord
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_UnlockAll
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_LockAll
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_User_Write
</UL>

<P><STRONG><a name="[eb]"></a>GetBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ddl.o(i.GetBit))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lptim_GetItStatus
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_GetIrqStatus
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_GetInputIO
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_GetStatus
</UL>

<P><STRONG><a name="[b9]"></a>GetK</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sensor_user.o(i.GetK))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Setting
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b0]"></a>GetPTValue</STRONG> (Thumb, 186 bytes, Stack size 96 bytes, sensor_user.o(i.GetPTValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = GetPTValue &rArr; GetPTADC &rArr; ReadSensor &rArr; Sensor_GetByte &rArr; Sensor_SDA_OUT &rArr; Gpio_Init &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bubbleSort_Signed
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPTADC
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_PData_Read
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorScan
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_General
</UL>

<P><STRONG><a name="[e8]"></a>Gpio_ClearIrq</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, gpio.o(i.Gpio_ClearIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Gpio_ClearIrq &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortB_IRQHandler
</UL>

<P><STRONG><a name="[b3]"></a>Gpio_ClrIO</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, gpio.o(i.Gpio_ClrIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Gpio_ClrIO &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Stop
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Start
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_SendByte
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_SendAsk
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_GetByte
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_CheckAsk
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Stop
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Start
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendByte
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CheckAsk
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_WAKE
</UL>

<P><STRONG><a name="[88]"></a>Gpio_EnableIrq</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, gpio.o(i.Gpio_EnableIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Gpio_EnableIrq &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SwitchInit
</UL>

<P><STRONG><a name="[ea]"></a>Gpio_GetInputIO</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, gpio.o(i.Gpio_GetInputIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Gpio_GetInputIO
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_GetByte
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_CheckAsk
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CheckAsk
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_General
</UL>

<P><STRONG><a name="[ec]"></a>Gpio_GetIrqStatus</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, gpio.o(i.Gpio_GetIrqStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Gpio_GetIrqStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortB_IRQHandler
</UL>

<P><STRONG><a name="[82]"></a>Gpio_Init</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, gpio.o(i.Gpio_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Gpio_Init &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LpUart1PortCfg
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LpUart1DeInit
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LpUart0PortCfg
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SwitchInit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDIICInit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDIICDeInit
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_SDA_OUT
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_SDA_IN
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SDA_OUT
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SDA_IN
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorIICInit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorIICDeInit
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_LED_State
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_LED_State
</UL>

<P><STRONG><a name="[83]"></a>Gpio_SetAfMode</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gpio.o(i.Gpio_SetAfMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Gpio_SetAfMode
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LpUart1PortCfg
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LpUart0PortCfg
</UL>

<P><STRONG><a name="[76]"></a>Gpio_SetAnalogMode</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, gpio.o(i.Gpio_SetAnalogMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Gpio_SetAnalogMode &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_AdcPortInit
</UL>

<P><STRONG><a name="[b4]"></a>Gpio_SetIO</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, gpio.o(i.Gpio_SetIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Gpio_SetIO &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Stop
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Start
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_SendByte
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_SendAsk
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_GetByte
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_CheckAsk
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Stop
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Start
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendByte
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CheckAsk
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_WAKE
</UL>

<P><STRONG><a name="[7]"></a>HardFault_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, interrupts_hc32l17x.o(i.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l17x.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>I2C0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l17x.o(i.I2C0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c0_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l17x.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>I2C1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l17x.o(i.I2C1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c1_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l17x.o(RESET)
</UL>
<P><STRONG><a name="[ef]"></a>LCDIICDeInit</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, iic_user.o(i.LCDIICDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LCDIICDeInit &rArr; Gpio_Init &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_General
</UL>

<P><STRONG><a name="[f0]"></a>LCDIICInit</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, iic_user.o(i.LCDIICInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LCDIICInit &rArr; Gpio_Init &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[f9]"></a>LCD_4GSignal</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, lcd_user.o(i.LCD_4GSignal))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_General
</UL>

<P><STRONG><a name="[f8]"></a>LCD_Battery</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, lcd_user.o(i.LCD_Battery))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_General
</UL>

<P><STRONG><a name="[f1]"></a>LCD_BigNumber</STRONG> (Thumb, 98 bytes, Stack size 4 bytes, lcd_user.o(i.LCD_BigNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LCD_BigNumber &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Pressure
</UL>

<P><STRONG><a name="[d4]"></a>LCD_General</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, lcd_user.o(i.LCD_General))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LCD_General &rArr; GetPTValue &rArr; GetPTADC &rArr; ReadSensor &rArr; Sensor_GetByte &rArr; Sensor_SDA_OUT &rArr; Gpio_Init &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_GetInputIO
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDIICDeInit
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorIICInit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorIICDeInit
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPTValue
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1ms
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Temperature
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Symbols
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Pressure
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Battery
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_4GSignal
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Refresh
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Send_Time
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[28]"></a>LCD_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l17x.o(i.LCD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l17x.o(RESET)
</UL>
<P><STRONG><a name="[f5]"></a>LCD_Init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, lcd_user.o(i.LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LCD_Init &rArr; LCD_Refresh &rArr; LCD_Write &rArr; LCD_CheckAsk &rArr; LCD_SDA_OUT &rArr; Gpio_Init &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDIICInit
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1ms
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Refresh
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_General
</UL>

<P><STRONG><a name="[ff]"></a>LCD_Mizi_Number</STRONG> (Thumb, 318 bytes, Stack size 16 bytes, lcd_user.o(i.LCD_Mizi_Number))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LCD_Mizi_Number &rArr; LCD_Mizi_One &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Mizi_One
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Mizi_Four
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SmallNumber
</UL>

<P><STRONG><a name="[105]"></a>LCD_Mizi_Point</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, lcd_user.o(i.LCD_Mizi_Point))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SmallNumber
</UL>

<P><STRONG><a name="[f6]"></a>LCD_Pressure</STRONG> (Thumb, 338 bytes, Stack size 24 bytes, lcd_user.o(i.LCD_Pressure))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LCD_Pressure &rArr; LCD_Range &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Unit
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Range
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_BigNumber
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_General
</UL>

<P><STRONG><a name="[102]"></a>LCD_Range</STRONG> (Thumb, 388 bytes, Stack size 32 bytes, lcd_user.o(i.LCD_Range))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LCD_Range &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Pressure
</UL>

<P><STRONG><a name="[104]"></a>LCD_SmallNumber</STRONG> (Thumb, 568 bytes, Stack size 16 bytes, lcd_user.o(i.LCD_SmallNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = LCD_SmallNumber &rArr; LCD_Mizi_Number &rArr; LCD_Mizi_One &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Mizi_Point
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Mizi_Number
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Temperature
</UL>

<P><STRONG><a name="[fa]"></a>LCD_Symbols</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, lcd_user.o(i.LCD_Symbols))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_General
</UL>

<P><STRONG><a name="[f7]"></a>LCD_Temperature</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lcd_user.o(i.LCD_Temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LCD_Temperature &rArr; LCD_SmallNumber &rArr; LCD_Mizi_Number &rArr; LCD_Mizi_One &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Unit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SmallNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_General
</UL>

<P><STRONG><a name="[115]"></a>LCD_Timeout</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, lcd_user.o(i.LCD_Timeout))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpTim0_IRQHandler
</UL>

<P><STRONG><a name="[101]"></a>LCD_Unit</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, lcd_user.o(i.LCD_Unit))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Temperature
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Pressure
</UL>

<P><STRONG><a name="[fd]"></a>LCD_Write</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, iic_user.o(i.LCD_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LCD_Write &rArr; LCD_CheckAsk &rArr; LCD_SDA_OUT &rArr; Gpio_Init &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Stop
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Start
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendByte
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CheckAsk
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Refresh
</UL>

<P><STRONG><a name="[1c]"></a>LPTIM0_1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, interrupts_hc32l17x.o(i.LPTIM0_1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LPTIM0_1_IRQHandler &rArr; LpTim0_IRQHandler &rArr; Lptim_ClrItStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpTim0_IRQHandler
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpTim1_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l17x.o(RESET)
</UL>
<P><STRONG><a name="[109]"></a>LPTimer0Init</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, timer_user.o(i.LPTimer0Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LPTimer0Init &rArr; Lptim_ConfIt &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lptim_Init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lptim_ConfIt
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lptim_Cmd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lptim_ClrItStatus
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPeripheralGate
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableNvic
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13]"></a>LPUART0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l17x.o(i.LPUART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LPUART0_IRQHandler &rArr; LpUart0_IRQHandler &rArr; LPUart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpUart0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l17x.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l17x.o(i.LPUART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LPUART1_IRQHandler &rArr; LpUart1_IRQHandler &rArr; LPUart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpUart1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l17x.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>LPUart_ClrStatus</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lpuart.o(i.LPUart_ClrStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPUart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpUart1_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpUart0_IRQHandler
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LpUart1Cfg
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LpUart0Cfg
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_SendData
</UL>

<P><STRONG><a name="[80]"></a>LPUart_DisableIrq</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lpuart.o(i.LPUart_DisableIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPUart_DisableIrq &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LpUart1Cfg
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LpUart0Cfg
</UL>

<P><STRONG><a name="[10e]"></a>LPUart_EnableFunc</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lpuart.o(i.LPUart_EnableFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPUart_EnableFunc &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_Init
</UL>

<P><STRONG><a name="[7f]"></a>LPUart_EnableIrq</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lpuart.o(i.LPUart_EnableIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPUart_EnableIrq &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LpUart1Cfg
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LpUart0Cfg
</UL>

<P><STRONG><a name="[10f]"></a>LPUart_GetStatus</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lpuart.o(i.LPUart_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LPUart_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_SendData
</UL>

<P><STRONG><a name="[7d]"></a>LPUart_Init</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, lpuart.o(i.LPUart_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LPUart_Init &rArr; LPUart_EnableFunc &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_EnableFunc
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LpUart1Cfg
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LpUart0Cfg
</UL>

<P><STRONG><a name="[117]"></a>LPUart_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lpuart.o(i.LPUart_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpUart1_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpUart0_IRQHandler
</UL>

<P><STRONG><a name="[b2]"></a>LPUart_SendData</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lpuart.o(i.LPUart_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LPUart_SendData &rArr; LPUart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_ClrStatus
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_SendData
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_SendDataFun
</UL>

<P><STRONG><a name="[37]"></a>LVD_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l17x.o(i.LVD_IRQHandler), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LVD_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lvd_IRQHandler (Weak Reference)
</UL>

<P><STRONG><a name="[32]"></a>LpTim0_IRQHandler</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, timer_user.o(i.LpTim0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LpTim0_IRQHandler &rArr; Lptim_ClrItStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lptim_GetItStatus
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lptim_ClrItStatus
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Timeout
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Link_Timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM0_1_IRQHandler
</UL>

<P><STRONG><a name="[34]"></a>LpUart0_IRQHandler</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, uart_user.o(i.LpUart0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LpUart0_IRQHandler &rArr; LPUart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_ReceiveData
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_ClrStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART0_IRQHandler
</UL>

<P><STRONG><a name="[35]"></a>LpUart1_IRQHandler</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, uart_user.o(i.LpUart1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LpUart1_IRQHandler &rArr; LPUart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_ReceiveData
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_ClrStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART1_IRQHandler
</UL>

<P><STRONG><a name="[13f]"></a>LpUartTimeOut</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, uart_user.o(i.LpUartTimeOut))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim0_IRQHandler
</UL>

<P><STRONG><a name="[10b]"></a>Lptim_ClrItStatus</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lptim.o(i.Lptim_ClrItStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Lptim_ClrItStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpTim0_IRQHandler
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTimer0Init
</UL>

<P><STRONG><a name="[10d]"></a>Lptim_Cmd</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lptim.o(i.Lptim_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Lptim_Cmd &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTimer0Init
</UL>

<P><STRONG><a name="[10c]"></a>Lptim_ConfIt</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lptim.o(i.Lptim_ConfIt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Lptim_ConfIt &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTimer0Init
</UL>

<P><STRONG><a name="[114]"></a>Lptim_GetItStatus</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lptim.o(i.Lptim_GetItStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Lptim_GetItStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpTim0_IRQHandler
</UL>

<P><STRONG><a name="[10a]"></a>Lptim_Init</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, lptim.o(i.Lptim_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Lptim_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTimer0Init
</UL>

<P><STRONG><a name="[20]"></a>PCA_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l17x.o(i.PCA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PCA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pca_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l17x.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>PCNT_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l17x.o(i.PCNT_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PCNT_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcnt_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l17x.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PORTA_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l17x.o(i.PORTA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PORTA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortA_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l17x.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PORTB_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l17x.o(i.PORTB_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PORTB_IRQHandler &rArr; PortB_IRQHandler &rArr; Gpio_ClearIrq &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortB_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l17x.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>PORTC_E_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, interrupts_hc32l17x.o(i.PORTC_E_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PORTC_E_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortE_IRQHandler (Weak Reference)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortC_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l17x.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>PORTD_F_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, interrupts_hc32l17x.o(i.PORTD_F_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PORTD_F_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortF_IRQHandler (Weak Reference)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortD_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l17x.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>PortB_IRQHandler</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, sys_user.o(i.PortB_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PortB_IRQHandler &rArr; Gpio_ClearIrq &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_GetIrqStatus
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClearIrq
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTB_IRQHandler
</UL>

<P><STRONG><a name="[22]"></a>RTC_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l17x.o(i.RTC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l17x.o(RESET)
</UL>
<P><STRONG><a name="[e1]"></a>ReadSensor</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, iic_user.o(i.ReadSensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ReadSensor &rArr; Sensor_GetByte &rArr; Sensor_SDA_OUT &rArr; Gpio_Init &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Stop
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Start
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_SendByte
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_SendAsk
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_GetByte
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_CheckAsk
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPTADC
</UL>

<P><STRONG><a name="[38]"></a>SPI0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l17x.o(i.SPI0_IRQHandler), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi0_IRQHandler (Weak Reference)
</UL>

<P><STRONG><a name="[39]"></a>SPI1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l17x.o(i.SPI1_IRQHandler), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi1_IRQHandler (Weak Reference)
</UL>

<P><STRONG><a name="[b1]"></a>SensorIICDeInit</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, iic_user.o(i.SensorIICDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SensorIICDeInit &rArr; Gpio_Init &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_PData_Read
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorScan
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_General
</UL>

<P><STRONG><a name="[af]"></a>SensorIICInit</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, iic_user.o(i.SensorIICInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SensorIICInit &rArr; Sysctrl_SetPeripheralGate &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPeripheralGate
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_PData_Read
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorScan
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_General
</UL>

<P><STRONG><a name="[d3]"></a>SensorScan</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, sensor_user.o(i.SensorScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SensorScan &rArr; GetPTValue &rArr; GetPTADC &rArr; ReadSensor &rArr; Sensor_GetByte &rArr; Sensor_SDA_OUT &rArr; Gpio_Init &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_PData_Write
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorIICInit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorIICDeInit
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPTValue
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Send_Time
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e9]"></a>SetBit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ddl.o(i.SetBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_EnableIrq
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_DisableIrq
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_ClrStatus
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lptim_ConfIt
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lptim_Cmd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lptim_ClrItStatus
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_EnableIrq
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClearIrq
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPeripheralGate
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetAnalogMode
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_EnableFunc
</UL>

<P><STRONG><a name="[12a]"></a>SysInit</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, sys_user.o(i.SysInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SysInit &rArr; App_SysClkInit &rArr; Sysctrl_ClkInit &rArr; Sysctrl_ClkSourceEnable &rArr; delay10us
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SysClkInit
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SwitchInit
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPeripheralGate
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l17x.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l17x.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>Sysctrl_ClkInit</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, sysctrl.o(i.Sysctrl_ClkInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Sysctrl_ClkInit &rArr; Sysctrl_ClkSourceEnable &rArr; delay10us
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkSourceEnable
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_XTLDriverCfg
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_XTHDriverCfg
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SysClkSwitch
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetXTLStableTime
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetXTHStableTime
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetRCLStableTime
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPLLStableTime
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPCLKDiv
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetHCLKDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SysClkInit
</UL>

<P><STRONG><a name="[8c]"></a>Sysctrl_ClkSourceEnable</STRONG> (Thumb, 348 bytes, Stack size 24 bytes, sysctrl.o(i.Sysctrl_ClkSourceEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Sysctrl_ClkSourceEnable &rArr; delay10us
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay10us
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysctrlUnlock
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkInit
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SysClkInit
</UL>

<P><STRONG><a name="[136]"></a>Sysctrl_GetHClkFreq</STRONG> (Thumb, 354 bytes, Stack size 48 bytes, sysctrl.o(i.Sysctrl_GetHClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Sysctrl_GetHClkFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_GetPClkFreq
</UL>

<P><STRONG><a name="[7c]"></a>Sysctrl_GetPClkFreq</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sysctrl.o(i.Sysctrl_GetPClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Sysctrl_GetPClkFreq &rArr; Sysctrl_GetHClkFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_GetHClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LpUart1Cfg
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LpUart0Cfg
</UL>

<P><STRONG><a name="[133]"></a>Sysctrl_SetHCLKDiv</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sysctrl.o(i.Sysctrl_SetHCLKDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sysctrl_SetHCLKDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysctrlUnlock
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkInit
</UL>

<P><STRONG><a name="[134]"></a>Sysctrl_SetPCLKDiv</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sysctrl.o(i.Sysctrl_SetPCLKDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sysctrl_SetPCLKDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysctrlUnlock
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkInit
</UL>

<P><STRONG><a name="[131]"></a>Sysctrl_SetPLLStableTime</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sysctrl.o(i.Sysctrl_SetPLLStableTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sysctrl_SetPLLStableTime
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkInit
</UL>

<P><STRONG><a name="[74]"></a>Sysctrl_SetPeripheralGate</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, sysctrl.o(i.Sysctrl_SetPeripheralGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Sysctrl_SetPeripheralGate &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LpUart1PortCfg
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LpUart1DeInit
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LpUart1Cfg
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LpUart0PortCfg
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LpUart0Cfg
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorIICInit
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_AdcPortInit
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_AdcInit
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTimer0Init
</UL>

<P><STRONG><a name="[12e]"></a>Sysctrl_SetRCLStableTime</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sysctrl.o(i.Sysctrl_SetRCLStableTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sysctrl_SetRCLStableTime
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkInit
</UL>

<P><STRONG><a name="[8b]"></a>Sysctrl_SetRCLTrim</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, sysctrl.o(i.Sysctrl_SetRCLTrim))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SysClkInit
</UL>

<P><STRONG><a name="[12d]"></a>Sysctrl_SetXTHStableTime</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sysctrl.o(i.Sysctrl_SetXTHStableTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sysctrl_SetXTHStableTime
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkInit
</UL>

<P><STRONG><a name="[130]"></a>Sysctrl_SetXTLStableTime</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sysctrl.o(i.Sysctrl_SetXTLStableTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sysctrl_SetXTLStableTime
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkInit
</UL>

<P><STRONG><a name="[132]"></a>Sysctrl_SysClkSwitch</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sysctrl.o(i.Sysctrl_SysClkSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Sysctrl_SysClkSwitch
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysctrlUnlock
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkInit
</UL>

<P><STRONG><a name="[12c]"></a>Sysctrl_XTHDriverCfg</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sysctrl.o(i.Sysctrl_XTHDriverCfg))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkInit
</UL>

<P><STRONG><a name="[12f]"></a>Sysctrl_XTLDriverCfg</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, sysctrl.o(i.Sysctrl_XTLDriverCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Sysctrl_XTLDriverCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkInit
</UL>

<P><STRONG><a name="[137]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_hc32l17x_1.o(i.SystemCoreClockUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SysClkSwitch
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[2b]"></a>SystemInit</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, system_hc32l17x_1.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l17x.o(.text)
</UL>
<P><STRONG><a name="[19]"></a>TIM0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l17x.o(i.TIM0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TIM0_IRQHandler &rArr; Tim0_IRQHandler &rArr; Bt_ClearIntFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l17x.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>TIM1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l17x.o(i.TIM1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim1_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l17x.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TIM2_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l17x.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim2_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l17x.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TIM3_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l17x.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim3_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l17x.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>TIM4_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l17x.o(i.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM4_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim4_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l17x.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>TIM5_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l17x.o(i.TIM5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim5_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l17x.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>TIM6_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l17x.o(i.TIM6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM6_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim6_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l17x.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>Tim0_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, timer_user.o(i.Tim0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Tim0_IRQHandler &rArr; Bt_ClearIntFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpUartTimeOut
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_ClearIntFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM0_IRQHandler
</UL>

<P><STRONG><a name="[140]"></a>Timer0Init</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, timer_user.o(i.Timer0Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Timer0Init &rArr; Sysctrl_SetPeripheralGate &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_Mode0_Init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_Mode0_EnableIrq
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_M0_Run
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_M0_Cnt16Set
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_M0_ARRSet
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_ClearIntFlag
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPeripheralGate
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableNvic
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11]"></a>UART0_2_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, interrupts_hc32l17x.o(i.UART0_2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART0_2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_IRQHandler (Weak Reference)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l17x.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>UART1_3_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, interrupts_hc32l17x.o(i.UART1_3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART1_3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_IRQHandler (Weak Reference)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l17x.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>VC0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l17x.o(i.VC0_IRQHandler), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VC0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vc0_IRQHandler (Weak Reference)
</UL>

<P><STRONG><a name="[3b]"></a>VC1_2_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, interrupts_hc32l17x.o(i.VC1_2_IRQHandler), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VC1_2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vc2_IRQHandler (Weak Reference)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vc1_IRQHandler (Weak Reference)
</UL>

<P><STRONG><a name="[21]"></a>WDT_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l17x.o(i.WDT_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WDT_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wdt_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l17x.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ble_user.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkSourceEnable
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkInit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Send_Time
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Analysis
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Mizi_Number
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_BigNumber
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Mizi_One
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Mizi_Four
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_GetHClkFreq
</UL>

<P><STRONG><a name="[73]"></a>ddl_memclr</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ddl.o(i.ddl_memclr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ddl_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LpUart1PortCfg
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LpUart1DeInit
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LpUart1Cfg
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LpUart0PortCfg
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LpUart0Cfg
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SwitchInit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDIICInit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDIICDeInit
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_SDA_OUT
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_SDA_IN
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SDA_OUT
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SDA_IN
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorIICInit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorIICDeInit
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_LED_State
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_AdcInit
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0Init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTimer0Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_LED_State
</UL>

<P><STRONG><a name="[71]"></a>delay10us</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ddl.o(i.delay10us))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay10us
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkSourceEnable
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bgr_BgrEnable
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[65]"></a>delay1ms</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ddl.o(i.delay1ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay1ms
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorIICInit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_WAKE
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_SMode
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Restart
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Link
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Judgment
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_AdcInit
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_User_Start
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_General
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Send_Time
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Analysis
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_IMSI
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_IMEI
</UL>

<P><STRONG><a name="[45]"></a>main</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = main &rArr; Ethernet_Send_Time &rArr; LCD_General &rArr; GetPTValue &rArr; GetPTADC &rArr; ReadSensor &rArr; Sensor_GetByte &rArr; Sensor_SDA_OUT &rArr; Gpio_Init &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1ms
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorScan
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTimer0Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_General
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetK
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Power_Init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Send_Time
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleAnd4GLpUartInit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_Scan
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Analysis
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[111]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_Init
</UL>

<P><STRONG><a name="[14e]"></a>_fadd</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[e6]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPTValue
</UL>

<P><STRONG><a name="[18c]"></a>_fmul</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)

<P><STRONG><a name="[18d]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub), UNUSED)

<P><STRONG><a name="[150]"></a>_fsub</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[8d]"></a>BLE_ADPTIM</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, ble_user.o(i.BLE_ADPTIM))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = BLE_ADPTIM &rArr; BLE_Restart &rArr; BLE_SendData &rArr; LPUart_SendData &rArr; LPUart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Restart
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Judgment
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Init
</UL>

<P><STRONG><a name="[97]"></a>BLE_AutoTime_Write</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ble_user.o(i.BLE_AutoTime_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = BLE_AutoTime_Write &rArr; Flash_User_Write &rArr; Flash_WriteWord
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_User_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Analysis
</UL>

<P><STRONG><a name="[92]"></a>BLE_Clear_Buffer</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ble_user.o(i.BLE_Clear_Buffer))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_SMode
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Restart
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Link
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Judgment
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Analysis
</UL>

<P><STRONG><a name="[a2]"></a>BLE_ERROR_Return</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, ble_user.o(i.BLE_ERROR_Return))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BLE_ERROR_Return &rArr; BLE_SendData &rArr; LPUart_SendData &rArr; LPUart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Analysis
</UL>

<P><STRONG><a name="[96]"></a>BLE_ID_Write</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ble_user.o(i.BLE_ID_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = BLE_ID_Write &rArr; BLE_ID_Set &rArr; BLE_Start &rArr; BLE_Judgment &rArr; BLE_SendData &rArr; LPUart_SendData &rArr; LPUart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_User_Write
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_ID_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Analysis
</UL>

<P><STRONG><a name="[98]"></a>BLE_IP1_Write</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ble_user.o(i.BLE_IP1_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = BLE_IP1_Write &rArr; Flash_User_Write &rArr; Flash_WriteWord
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_User_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Analysis
</UL>

<P><STRONG><a name="[99]"></a>BLE_IP2_Write</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ble_user.o(i.BLE_IP2_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = BLE_IP2_Write &rArr; Flash_User_Write &rArr; Flash_WriteWord
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_User_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Analysis
</UL>

<P><STRONG><a name="[8e]"></a>BLE_Judgment</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ble_user.o(i.BLE_Judgment))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BLE_Judgment &rArr; BLE_SendData &rArr; LPUart_SendData &rArr; LPUart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_SendData
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Clear_Buffer
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Start
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_ID_Set
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_DEEPSLEEP
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Uart
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_TPL
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Passen
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_OutAT
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_ADPTIM
</UL>

<P><STRONG><a name="[a0]"></a>BLE_LCD_Flag_Write</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ble_user.o(i.BLE_LCD_Flag_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = BLE_LCD_Flag_Write &rArr; Flash_User_Write &rArr; Flash_WriteWord
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_User_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Analysis
</UL>

<P><STRONG><a name="[a1]"></a>BLE_LCD_WakeUpTime_Write</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ble_user.o(i.BLE_LCD_WakeUpTime_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = BLE_LCD_WakeUpTime_Write &rArr; Flash_User_Write &rArr; Flash_WriteWord
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_User_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Analysis
</UL>

<P><STRONG><a name="[91]"></a>BLE_LED_State</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ble_user.o(i.BLE_LED_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BLE_LED_State &rArr; Gpio_Init &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Analysis
</UL>

<P><STRONG><a name="[a3]"></a>BLE_Link</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, ble_user.o(i.BLE_Link))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = BLE_Link &rArr; BLE_SendData &rArr; LPUart_SendData &rArr; LPUart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_SendData
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Clear_Buffer
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Analysis
</UL>

<P><STRONG><a name="[a4]"></a>BLE_OutAT</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ble_user.o(i.BLE_OutAT))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = BLE_OutAT &rArr; BLE_Judgment &rArr; BLE_SendData &rArr; LPUart_SendData &rArr; LPUart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Judgment
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Analysis
</UL>

<P><STRONG><a name="[95]"></a>BLE_PData_Read</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ble_user.o(i.BLE_PData_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = BLE_PData_Read &rArr; GetPTValue &rArr; GetPTADC &rArr; ReadSensor &rArr; Sensor_GetByte &rArr; Sensor_SDA_OUT &rArr; Gpio_Init &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorIICInit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorIICDeInit
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPTValue
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Analysis
</UL>

<P><STRONG><a name="[ad]"></a>BLE_Passen</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, ble_user.o(i.BLE_Passen))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = BLE_Passen &rArr; BLE_Judgment &rArr; BLE_SendData &rArr; LPUart_SendData &rArr; LPUart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Judgment
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Init
</UL>

<P><STRONG><a name="[8f]"></a>BLE_Restart</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, ble_user.o(i.BLE_Restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BLE_Restart &rArr; BLE_SendData &rArr; LPUart_SendData &rArr; LPUart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_SendData
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Clear_Buffer
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_ID_Set
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Uart
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_ADPTIM
</UL>

<P><STRONG><a name="[ac]"></a>BLE_SMode</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, ble_user.o(i.BLE_SMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BLE_SMode &rArr; BLE_SendData &rArr; LPUart_SendData &rArr; LPUart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_SendData
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Clear_Buffer
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Init
</UL>

<P><STRONG><a name="[a6]"></a>BLE_SendData</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ble_user.o(i.BLE_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BLE_SendData &rArr; LPUart_SendData &rArr; LPUart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_SysData_Read
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_SMode
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Restart
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_PData_Read
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Link
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Judgment
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_ERROR_Return
</UL>

<P><STRONG><a name="[9a]"></a>BLE_Sensor_Write</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ble_user.o(i.BLE_Sensor_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = BLE_Sensor_Write &rArr; Flash_User_Write &rArr; Flash_WriteWord
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_User_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Analysis
</UL>

<P><STRONG><a name="[94]"></a>BLE_SysData_Read</STRONG> (Thumb, 482 bytes, Stack size 8 bytes, ble_user.o(i.BLE_SysData_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BLE_SysData_Read &rArr; BLE_SendData &rArr; LPUart_SendData &rArr; LPUart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_SendData
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_User_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Analysis
</UL>

<P><STRONG><a name="[ae]"></a>BLE_TPL</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ble_user.o(i.BLE_TPL))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = BLE_TPL &rArr; BLE_Judgment &rArr; BLE_SendData &rArr; LPUart_SendData &rArr; LPUart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Judgment
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Init
</UL>

<P><STRONG><a name="[aa]"></a>BLE_Uart</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, ble_user.o(i.BLE_Uart))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = BLE_Uart &rArr; BLE_Restart &rArr; BLE_SendData &rArr; LPUart_SendData &rArr; LPUart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Restart
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Judgment
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Init
</UL>

<P><STRONG><a name="[9d]"></a>BLE_ZeroOffset_Write</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ble_user.o(i.BLE_ZeroOffset_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = BLE_ZeroOffset_Write &rArr; Flash_User_Write &rArr; Flash_WriteWord
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_User_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Analysis
</UL>

<P><STRONG><a name="[f2]"></a>LCD_CheckAsk</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, iic_user.o(i.LCD_CheckAsk))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LCD_CheckAsk &rArr; LCD_SDA_OUT &rArr; Gpio_Init &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_GetInputIO
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SDA_OUT
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SDA_IN
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write
</UL>

<P><STRONG><a name="[f3]"></a>LCD_SDA_IN</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, iic_user.o(i.LCD_SDA_IN))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LCD_SDA_IN &rArr; Gpio_Init &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CheckAsk
</UL>

<P><STRONG><a name="[f4]"></a>LCD_SDA_OUT</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, iic_user.o(i.LCD_SDA_OUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LCD_SDA_OUT &rArr; Gpio_Init &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Stop
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CheckAsk
</UL>

<P><STRONG><a name="[103]"></a>LCD_SendByte</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, iic_user.o(i.LCD_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LCD_SendByte &rArr; Gpio_SetIO &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write
</UL>

<P><STRONG><a name="[106]"></a>LCD_Start</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, iic_user.o(i.LCD_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_Start &rArr; Gpio_SetIO &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write
</UL>

<P><STRONG><a name="[107]"></a>LCD_Stop</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, iic_user.o(i.LCD_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LCD_Stop &rArr; LCD_SDA_OUT &rArr; Gpio_Init &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SDA_OUT
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write
</UL>

<P><STRONG><a name="[122]"></a>Sensor_CheckAsk</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, iic_user.o(i.Sensor_CheckAsk))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Sensor_CheckAsk &rArr; Sensor_SDA_OUT &rArr; Gpio_Init &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_GetInputIO
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_SDA_OUT
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_SDA_IN
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSensor
</UL>

<P><STRONG><a name="[124]"></a>Sensor_GetByte</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, iic_user.o(i.Sensor_GetByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Sensor_GetByte &rArr; Sensor_SDA_OUT &rArr; Gpio_Init &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_GetInputIO
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_SDA_OUT
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_SDA_IN
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSensor
</UL>

<P><STRONG><a name="[128]"></a>Sensor_SDA_IN</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, iic_user.o(i.Sensor_SDA_IN))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Sensor_SDA_IN &rArr; Gpio_Init &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_SendAsk
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_GetByte
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_CheckAsk
</UL>

<P><STRONG><a name="[129]"></a>Sensor_SDA_OUT</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, iic_user.o(i.Sensor_SDA_OUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Sensor_SDA_OUT &rArr; Gpio_Init &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Stop
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_SendAsk
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_GetByte
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_CheckAsk
</UL>

<P><STRONG><a name="[125]"></a>Sensor_SendAsk</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, iic_user.o(i.Sensor_SendAsk))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Sensor_SendAsk &rArr; Sensor_SDA_OUT &rArr; Gpio_Init &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_SDA_OUT
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_SDA_IN
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSensor
</UL>

<P><STRONG><a name="[121]"></a>Sensor_SendByte</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, iic_user.o(i.Sensor_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Sensor_SendByte &rArr; Gpio_SetIO &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSensor
</UL>

<P><STRONG><a name="[120]"></a>Sensor_Start</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, iic_user.o(i.Sensor_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Sensor_Start &rArr; Gpio_SetIO &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSensor
</UL>

<P><STRONG><a name="[123]"></a>Sensor_Stop</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, iic_user.o(i.Sensor_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Sensor_Stop &rArr; Sensor_SDA_OUT &rArr; Gpio_Init &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_SDA_OUT
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSensor
</UL>

<P><STRONG><a name="[87]"></a>App_SwitchInit</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, sys_user.o(i.App_SwitchInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = App_SwitchInit &rArr; Gpio_EnableIrq &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_EnableIrq
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableNvic
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[89]"></a>App_SysClkInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sys_user.o(i.App_SysClkInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = App_SysClkInit &rArr; Sysctrl_ClkInit &rArr; Sysctrl_ClkSourceEnable &rArr; delay10us
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetRCLTrim
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkSourceEnable
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[e0]"></a>GetPTADC</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sensor_user.o(i.GetPTADC))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GetPTADC &rArr; ReadSensor &rArr; Sensor_GetByte &rArr; Sensor_SDA_OUT &rArr; Gpio_Init &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSensor
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPTValue
</UL>

<P><STRONG><a name="[e3]"></a>bubbleSort_Signed</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, sensor_user.o(i.bubbleSort_Signed))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bubbleSort_Signed
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPTValue
</UL>

<P><STRONG><a name="[bd]"></a>Ethernet_ATCSQ</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, ethernet_user.o(i.Ethernet_ATCSQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Ethernet_ATCSQ &rArr; Ethernet_SendDataFun &rArr; LPUart_SendData &rArr; LPUart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_SendDataFun
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Send_Time
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Init
</UL>

<P><STRONG><a name="[c0]"></a>Ethernet_CGATT</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, ethernet_user.o(i.Ethernet_CGATT))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Ethernet_CGATT &rArr; Ethernet_SendDataFun &rArr; LPUart_SendData &rArr; LPUart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_SendDataFun
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Send_Time
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Init
</UL>

<P><STRONG><a name="[c5]"></a>Ethernet_Clear_Buffer</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ethernet_user.o(i.Ethernet_Clear_Buffer))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Senddata_Success
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_IMSI
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_IMEI
</UL>

<P><STRONG><a name="[c1]"></a>Ethernet_Close_Socket</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, ethernet_user.o(i.Ethernet_Close_Socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Ethernet_Close_Socket &rArr; Ethernet_Judgment &rArr; Ethernet_SendDataFun &rArr; LPUart_SendData &rArr; LPUart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Number_To_Char
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Judgment
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Send_Time
</UL>

<P><STRONG><a name="[c4]"></a>Ethernet_IMEI</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, ethernet_user.o(i.Ethernet_IMEI))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = Ethernet_IMEI &rArr; Flash_User_Write &rArr; Flash_WriteWord
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_User_Write
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1ms
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_SendDataFun
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Clear_Buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Send_Time
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Init
</UL>

<P><STRONG><a name="[c6]"></a>Ethernet_IMSI</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, ethernet_user.o(i.Ethernet_IMSI))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = Ethernet_IMSI &rArr; Flash_User_Write &rArr; Flash_WriteWord
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_User_Write
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1ms
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_SendDataFun
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Clear_Buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Send_Time
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Init
</UL>

<P><STRONG><a name="[c3]"></a>Ethernet_Judgment</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, ethernet_user.o(i.Ethernet_Judgment))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Ethernet_Judgment &rArr; Ethernet_SendDataFun &rArr; LPUart_SendData &rArr; LPUart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_SendDataFun
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Uart
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_TTMode_Exit
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Close_Socket
</UL>

<P><STRONG><a name="[c8]"></a>Ethernet_LED_State</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ethernet_user.o(i.Ethernet_LED_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Ethernet_LED_State &rArr; Gpio_Init &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Send_Time
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Init
</UL>

<P><STRONG><a name="[c9]"></a>Ethernet_Power_On</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, ethernet_user.o(i.Ethernet_Power_On))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Ethernet_Power_On
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Send_Time
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Init
</UL>

<P><STRONG><a name="[be]"></a>Ethernet_SendDataFun</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ethernet_user.o(i.Ethernet_SendDataFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Ethernet_SendDataFun &rArr; LPUart_SendData &rArr; LPUart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Send_Time
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Set_Socket
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Judgment
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_IMSI
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_IMEI
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_CGATT
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_ATCSQ
</UL>

<P><STRONG><a name="[d0]"></a>Ethernet_Senddata_Success</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ethernet_user.o(i.Ethernet_Senddata_Success))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Ethernet_Senddata_Success
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Clear_Buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Send_Time
</UL>

<P><STRONG><a name="[d1]"></a>Ethernet_Server_Ready</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, ethernet_user.o(i.Ethernet_Server_Ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Ethernet_Server_Ready
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Send_Time
</UL>

<P><STRONG><a name="[cf]"></a>Ethernet_Set_Socket</STRONG> (Thumb, 200 bytes, Stack size 72 bytes, ethernet_user.o(i.Ethernet_Set_Socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Ethernet_Set_Socket &rArr; Ethernet_SendDataFun &rArr; LPUart_SendData &rArr; LPUart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Number_To_Char
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Socket_Create
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_SendDataFun
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Send_Time
</UL>

<P><STRONG><a name="[d5]"></a>Ethernet_Socket_Create</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, ethernet_user.o(i.Ethernet_Socket_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Ethernet_Socket_Create
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Set_Socket
</UL>

<P><STRONG><a name="[d2]"></a>Ethernet_TTMode_Exit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ethernet_user.o(i.Ethernet_TTMode_Exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Ethernet_TTMode_Exit &rArr; Ethernet_Judgment &rArr; Ethernet_SendDataFun &rArr; LPUart_SendData &rArr; LPUart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Judgment
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Send_Time
</UL>

<P><STRONG><a name="[ca]"></a>Ethernet_Uart</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, ethernet_user.o(i.Ethernet_Uart))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Ethernet_Uart &rArr; Ethernet_Judgment &rArr; Ethernet_SendDataFun &rArr; LPUart_SendData &rArr; LPUart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Judgment
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Send_Time
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Init
</UL>

<P><STRONG><a name="[c2]"></a>Number_To_Char</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, ethernet_user.o(i.Number_To_Char))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Number_To_Char &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Set_Socket
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Close_Socket
</UL>

<P><STRONG><a name="[fe]"></a>LCD_Mizi_Four</STRONG> (Thumb, 370 bytes, Stack size 4 bytes, lcd_user.o(i.LCD_Mizi_Four))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LCD_Mizi_Four &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Mizi_Number
</UL>

<P><STRONG><a name="[100]"></a>LCD_Mizi_One</STRONG> (Thumb, 370 bytes, Stack size 4 bytes, lcd_user.o(i.LCD_Mizi_One))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LCD_Mizi_One &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Mizi_Number
</UL>

<P><STRONG><a name="[fb]"></a>LCD_Refresh</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, lcd_user.o(i.LCD_Refresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LCD_Refresh &rArr; LCD_Write &rArr; LCD_CheckAsk &rArr; LCD_SDA_OUT &rArr; Gpio_Init &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_General
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[135]"></a>_SysctrlUnlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sysctrl.o(i._SysctrlUnlock))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkSourceEnable
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SysClkSwitch
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPCLKDiv
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetHCLKDiv
</UL>

<P><STRONG><a name="[bc]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, interrupts_hc32l17x.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableNvic
</UL>

<P><STRONG><a name="[51]"></a>_dadd1</STRONG> (Thumb, 290 bytes, Stack size 20 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[50]"></a>_dsub1</STRONG> (Thumb, 470 bytes, Stack size 40 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[151]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
</UL>

<P><STRONG><a name="[14f]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[b7]"></a>ClkTrim_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED, UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKTRIM_IRQHandler
</UL>

<P><STRONG><a name="[61]"></a>Dac_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DAC_IRQHandler
</UL>

<P><STRONG><a name="[b8]"></a>Dmac_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAC_IRQHandler
</UL>

<P><STRONG><a name="[d6]"></a>Flash_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_RAM_IRQHandler
</UL>

<P><STRONG><a name="[ed]"></a>I2c0_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_IRQHandler
</UL>

<P><STRONG><a name="[ee]"></a>I2c1_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
</UL>

<P><STRONG><a name="[fc]"></a>Lcd_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IRQHandler
</UL>

<P><STRONG><a name="[108]"></a>LpTim1_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM0_1_IRQHandler
</UL>

<P><STRONG><a name="[113]"></a>Lvd_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED, UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVD_IRQHandler
</UL>

<P><STRONG><a name="[118]"></a>Pca_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA_IRQHandler
</UL>

<P><STRONG><a name="[119]"></a>Pcnt_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCNT_IRQHandler
</UL>

<P><STRONG><a name="[11a]"></a>PortA_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTA_IRQHandler
</UL>

<P><STRONG><a name="[11b]"></a>PortC_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTC_E_IRQHandler
</UL>

<P><STRONG><a name="[11d]"></a>PortD_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTD_F_IRQHandler
</UL>

<P><STRONG><a name="[11c]"></a>PortE_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTC_E_IRQHandler
</UL>

<P><STRONG><a name="[11e]"></a>PortF_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTD_F_IRQHandler
</UL>

<P><STRONG><a name="[d7]"></a>Ram_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_RAM_IRQHandler
</UL>

<P><STRONG><a name="[11f]"></a>Rtc_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[126]"></a>Spi0_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED, UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_IRQHandler
</UL>

<P><STRONG><a name="[127]"></a>Spi1_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED, UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_IRQHandler
</UL>

<P><STRONG><a name="[12b]"></a>SysTick_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[138]"></a>Tim1_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_IRQHandler
</UL>

<P><STRONG><a name="[139]"></a>Tim2_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[13a]"></a>Tim3_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[13b]"></a>Tim4_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[13c]"></a>Tim5_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
</UL>

<P><STRONG><a name="[13d]"></a>Tim6_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
</UL>

<P><STRONG><a name="[146]"></a>Uart0_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_2_IRQHandler
</UL>

<P><STRONG><a name="[148]"></a>Uart1_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_3_IRQHandler
</UL>

<P><STRONG><a name="[147]"></a>Uart2_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_2_IRQHandler
</UL>

<P><STRONG><a name="[149]"></a>Uart3_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_3_IRQHandler
</UL>

<P><STRONG><a name="[14a]"></a>Vc0_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED, UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VC0_IRQHandler
</UL>

<P><STRONG><a name="[14b]"></a>Vc1_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED, UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VC1_2_IRQHandler
</UL>

<P><STRONG><a name="[14c]"></a>Vc2_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED, UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VC1_2_IRQHandler
</UL>

<P><STRONG><a name="[14d]"></a>Wdt_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_IRQHandler
</UL>

<P><STRONG><a name="[5f]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
